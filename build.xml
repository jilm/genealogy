<project name="genealogy" default="book"
    xmlns:if="ant:if" 
    xmlns:unless="ant:unless" >

    <!-- Load project properties -->
    <property name="conf.filename" value="configuration.prop" />
    <available property="conf.file" file="${conf.filename}" />
    <loadproperties srcFile="${conf.filename}" if:set="conf.file" />
    <echo message="Project configuration loaded." if:set="conf.file" />
    <echo message="Project configuration not fount." unless:set="conf.file" />
    <property name="data.dir" location="src/data" unless:set="data-dir" />
    <property name="data.dir" location="${data-dir}" if:set="data-dir" />
    <echo>Data directory: ${data.dir}</echo>

    <!-- Check depency -->
    <available property="jing"
            classname="com.thaiopensource.relaxng.util.JingTask" />
    <echo message="Jing ....................... OK"
        if:set="jing" />
    <echo message="Jing ....................... FAILED"
        unless:set="jing" />
    <available property="av.saxon.query" classname="net.sf.saxon.Query" />
    <echo message="Saxon query ................ OK"
        if:set="av.saxon.query" />
    <echo message="Saxon query ................ FAILED"
        unless:set="av.saxon.query" />

  <!--
 
        Compile input data into the person, birth, death and wedding lists.

  -->
  <target name="lists">

    <antcall target="validate-data" if:set="jing" />

    <xslt style="${xslt.dir}/makePersonList.xsl"
          in="src/data.xml"
	  out="${build.dir}/personList.xml" >

        <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
            value="org.apache.xerces.parsers.XIncludeParserConfiguration" />

    </xslt>

    <xslt style="${xslt.dir}/makeBirthList.xsl"
          in="src/data.xml"
	  out="${build.dir}/birthList.xml" >

        <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
            value="org.apache.xerces.parsers.XIncludeParserConfiguration" />

    </xslt>

    <xslt style="${xslt.dir}/makeDeathList.xsl"
          in="src/data.xml"
	  out="${build.dir}/deathList.xml" >

        <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
            value="org.apache.xerces.parsers.XIncludeParserConfiguration" />

    </xslt>

    <xslt style="${xslt.dir}/makeWeddingList.xsl"
          in="src/data.xml"
	  out="${build.dir}/weddingList.xml" >

        <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
            value="org.apache.xerces.parsers.XIncludeParserConfiguration" />

    </xslt>
  
  </target>

  <!--

        Validate input data

  -->
  <target name="validate-data" >
    <echo message="Going to validate input data..." />
    <!-- For xml validation, the relaxNG is used. -->
    <taskdef name="jing"
           classname="com.thaiopensource.relaxng.util.JingTask" />
    <jing rngfile="${schema.dir}/schema.rnc"
          compactsyntax="true" >
      <fileset dir="${src.dir}" includes="*.xml" />
    </jing>
    <echo message="OK" />
  </target>

    <target name="configure" >

        <fileset id="data.files" dir="src/data" includes="*" />
        <property name="data" refid="data.files" />
        <echo>${data}</echo>


        <xslt style="configure.xsl"
              in="config.xml"
	      out="build/build.xml" >
            <param name="validate" expression="jing" />
        </xslt>

        <ant dir="build" target="validate-data" />

    </target>

  <description>
    # Builds genealogy information into the book

    

  </description>

  <property name="schema.dir" value="schema" />
  <property name="xslt.dir" value="stylesheet" />
  <property name="build.dir" value="build" />
  <property name="test.dir" value="test" />
  <property name="src.dir" value="src/data" />

  <!-- Load project specific proprties from the conf. file. -->


  <target name="clean">
    <delete>
      <fileset dir="${build.dir}" includes="*" />
    </delete>
  </target>

  <target name="fix">
    <fixcrlf srcdir="${src.dir}" includes="*.xml" />
    <fixcrlf srcdir="${xslt.dir}" includes="*.xsl" />
    <fixcrlf srcdir="${schema.dir}" includes="*.rnc" />
  </target>


  <!--

    # Make the whole book.

    The book is composed of the following:

    1. text part of book
    2. graph
    3. list of persons
    4. bibliography
    5. index
    6. map
    7. time graph

  -->
  <target name="book" depends="text">

    <echo message="${title}" />

    <xslt style="${xslt.dir}/makeBibliography.xsl"
          in="src/data.xml"
      	  out="${build.dir}/sources.bib" >

        <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
            value="org.apache.xerces.parsers.XIncludeParserConfiguration" />

    </xslt>

    <exec executable="xelatex"
          dir="${build.dir}">
      <arg file="${build.dir}/book.tex" />
    </exec>
    <exec executable="bibtex"
          dir="${build.dir}">
      <arg line="book" />
    </exec>
    <exec executable="makeindex"
          dir="${build.dir}">
      <arg line="book" />
    </exec>
    <exec executable="xelatex"
          dir="${build.dir}">
      <arg file="${build.dir}/personList.tex" />
    </exec>
    <exec executable="xelatex"
          dir="${build.dir}">
      <arg file="${build.dir}/personList.tex" />
    </exec>

  </target>

  <!--

    Convert book text from xml to tex

  -->
  <target name="text" depends="index">

    <xslt style="${xslt.dir}/makeBook.xsl"
          in="src/book/text.xml"
      	  out="${build.dir}/book.tex" >

        <param name="title" expression="${title}" />

        <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
            value="org.apache.xerces.parsers.XIncludeParserConfiguration" />

    </xslt>

   </target>

  <target name="test">
    <xslt style="${test.dir}/analyzeDate.xsl"
          in="src/book/text.xml"
          out="${build.dir}/testResult.xml"/>
  </target>


  <target name="index" depends="lists">

    <description>
      # Create a source for index of persons for the book

      1. It takes a person list and generates a key index for each person.
         The index key is of the form: [surname]![given name].
      2. For each wedding record and the bride, it adds an key of the form:
         [married name]![given name] see [birth name]![given name].
      3. Add a birth year to duplicite keys.
    </description>

    <xslt style="${xslt.dir}/makeIndexSource.xsl"
          in="${build.dir}/personList.xml"
      	  out="${build.dir}/index.xml" >

        <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
            value="org.apache.xerces.parsers.XIncludeParserConfiguration" />

    </xslt>

  </target>

</project>
